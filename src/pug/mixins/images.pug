//- +img-retina(``, ``, ``, ``, ``, ``);
mixin img-retina(name, type, alt, className, width, height, ...args)
	- let srcsetAttr = attributes.lazy ? 'data-srcset' : 'srcset';
	- let srcAttr = attributes.lazy ? 'data-src' : 'src';
	- let sourceWebp = {};
	- let img = {};
	- const folderMain = '/images';
	- const folderWebp = `${folderMain}/webp`;

	- sourceWebp[srcsetAttr] = `${folderWebp}/${name}.webp 1x, ${folderWebp}/${name}@2x.webp 2x`;
	- img.class = attributes.lazy ? `lazyload ${className}` : `${className}`;
	- img[srcAttr] = `${folderMain}/${name}.${type}`;
	- img[srcsetAttr] = `${folderMain}/${name}.${type} 1x, ${folderMain}/${name}@2x.${type} 2x`;
	- img.width = width;
	- img.height = height;

	picture
		if args.length > 0
			- let sourceArgsWebp = {};
			- let sourceArgs = {};

			each item in args
				- sourceArgsWebp[srcsetAttr] = `${folderWebp}/${name}-${item}.webp 1x, ${folderWebp}/${name}-${item}@2x.webp 2x`;
				- sourceArgs[srcsetAttr] = `${folderMain}/${name}-${item}.${type} 1x, ${folderMain}/${name}-${item}@2x.${type} 2x`;
				- let media = `(max-width: ${item}px)`

				source(media = media type="image/webp")&attributes(sourceArgsWebp)
				source(media = media type= type==='jpg'?"image/jpeg":`image/${type}`)&attributes(sourceArgs)

		source(type="image/webp")&attributes(sourceWebp)
		img(alt=alt)&attributes(img)
